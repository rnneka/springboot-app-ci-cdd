pipeline {
    agent any
    options {
        timeout(time: 10, unit: 'MINUTES')
    }
    parameters {
        string(name: 'IMAGE_TAG', defaultValue: "${BUILD_ID}", description: 'Docker image tag')
        string(name: 'DOCKER_IMAGE', defaultValue: 'ityourway/springboot-app-ci-cd', description: 'Docker image name')
        string(name: 'CONTAINER_NAME', defaultValue: 'springboot-app', description: 'Docker container name')
        string(name: 'REGISTRY', defaultValue: 'ityourway/springboot-app-ci-cd', description: 'Your Docker registry repository Name')
        string(name: 'REGISTRY_CREDENTIAL', defaultValue: 'dockerhub-creds', description: 'Docker registry credentials id')
        string(name: 'GITHUB_CREDENTIAL', defaultValue: 'jenkins_github_creds', description: 'Github access credentials id')
        string(name: 'GITHUB_REPO_URL', defaultValue: 'https://github.com/ityourway/springboot-app-ci-cd.git', description: 'Github repository url')
        string(name: 'GITHUB_BRANCH', defaultValue: 'main', description: 'Github branch for your build')
        string(name: 'SONARQUBE_SERVER_NAME', defaultValue: 'sonarqube_server', description: 'Name for your sonarqube server')
        string(name: 'NEXUS_URL', defaultValue: '3.80.238.94:8081', description: 'Your Nexus URL')
        string(name: 'NEXUS_CREDENTIAL', defaultValue: 'jenkins_nexus_creds', description: 'Your Nexus Credentials')
        string(name: 'REMOTE_USER', defaultValue: 'ec2-user', description: 'Remote server username')
        string(name: 'MICROSERVICE_SERVER', defaultValue: 'microservice_server', description: 'The microservice server that Jenkins will SSH into Using Publish Over SSH.')
        string(name: 'MONOLITHIC_SERVER', defaultValue: 'monolithic_server', description: 'The monolithic server that Jenkins will SSH into Using Publish Over SSH.')
    }

    environment {
        IMAGE_TAG = "${params.IMAGE_TAG}"
        DOCKER_IMAGE = "${params.DOCKER_IMAGE}"
        CONTAINER_NAME = "${params.CONTAINER_NAME}"
        REMOTE_USER = "${params.REMOTE_USER}"
        REGISTRY = "${params.REGISTRY}"
        REGISTRY_CREDENTIAL = "${params.REGISTRY_CREDENTIAL}"
        GITHUB_CREDENTIAL = "${params.GITHUB_CREDENTIAL}"
        GITHUB_REPO_URL = "${params.GITHUB_REPO_URL}"
        GITHUB_BRANCH = "${params.GITHUB_BRANCH}"
        SONARQUBE_SERVER_NAME = "${params.SONARQUBE_SERVER_NAME}"
        NEXUS_URL = "${params.NEXUS_URL}"
        NEXUS_CREDENTIAL = "${params.NEXUS_CREDENTIAL}"
        MICROSERVICE_SERVER = "${params.MICROSERVICE_SERVER}"
        MONOLITHIC_SERVER = "${params.MONOLITHIC_SERVER}"
    }

    stages {
        
        stage("Validate Parameters") {
            steps {
                script {
                    // Check if required parameters are provided
                    def requiredParameters = ['IMAGE_TAG', 'DOCKER_IMAGE', 'CONTAINER_NAME', 'REMOTE_USER', 'REGISTRY', 'REGISTRY_CREDENTIAL', 'GITHUB_CREDENTIAL', 'GITHUB_REPO_URL', 'GITHUB_BRANCH']
                    for (param in requiredParameters) {
                        if (!params.containsKey(param) || params[param].trim() == "") {
                            error("Parameter '$param' is missing or empty. Please provide a value.")
                        }
                    }
                }
            }
        }
        
        stage("Checkout Code From GitHub") {
            steps {
                script {
                    git branch: "${GITHUB_BRANCH}", credentialsId: "${GITHUB_CREDENTIAL}", url: "${GITHUB_REPO_URL}"
                }
            }
        }

        
        stage('Application Build And Test') {
            steps {
                sh 'chmod +x ./mvnw'
                sh './mvnw clean install'
                sh './mvnw test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv("${SONARQUBE_SERVER_NAME}") {
                        sh './mvnw sonar:sonar'
                    }
                }
            }
        }
       
        stage('Upload Snapshot to Nexus Repository') {
            steps {
                script {
                  def nexusUrl = "${NEXUS_URL}"
                  def nexusCredentialsId = "${NEXUS_CREDENTIAL}"
                  def groupId = 'com.app'
                  def artifactId = 'blog'
                  def version = '0.0.1-SNAPSHOT'
                  def packaging = 'jar'

                  def artifactPath = "target/${artifactId}-${version}.${packaging}"

                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: nexusUrl,
                    groupId: groupId,
                    version: version,
                    repository: 'maven-snapshots',
                    credentialsId: nexusCredentialsId,
                    artifacts: [
                        [artifactId: artifactId,
                         classifier: '',
                         file: artifactPath,
                         type: packaging,
                         filename: "${artifactId}-${version}.${packaging}"]
                    ]
                )
            }
        }
    }
        
        stage('Docker Build and Push') {
            steps {
                script {
                    // Log in to Docker Registry
                    docker.withRegistry('', REGISTRY_CREDENTIAL) {
                        // Run your shell script with the IMAGE_TAG parameter
                        sh """
                        ./mvnw clean install
                        docker rmi -f ${DOCKER_IMAGE}:V00${IMAGE_TAG} &>/dev/null && echo 'Removed old container'
                        docker build -t ${DOCKER_IMAGE}:V00${IMAGE_TAG} .
                        docker push ${DOCKER_IMAGE}:V00${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy To Microservice Server') {
            steps {
                script {
                   def deployCommand = '''
    set -ex
    mkdir -p /home/${REMOTE_USER}/deployment
    echo 'version: "3.9"

services:
  blog-application:
    image: ${DOCKER_IMAGE}:V00${IMAGE_TAG}
    container_name: ${CONTAINER_NAME}
    ports:
      - "8081:8081"' > /home/${REMOTE_USER}/deployment/docker-compose.yml
    cd /home/${REMOTE_USER}/deployment/
    sudo docker rm -f ${CONTAINER_NAME}
    sudo /usr/local/bin/docker-compose down 
    echo 'Removed old container'
    sleep 3
    echo 'Starting a new container with the image ${DOCKER_IMAGE}:V00${IMAGE_TAG}'
    sudo /usr/local/bin/docker-compose up -d
'''


                    sshPublisher(publishers: [sshPublisherDesc(
                        configName: env.MICROSERVICE_SERVER,
                        transfers: [sshTransfer(
                            cleanRemote: false,
                            execCommand: deployCommand,
                            execTimeout: 120000,
                            flatten: false,
                            makeEmptyDirs: false,
                            noDefaultExcludes: false,
                            patternSeparator: '[, ]+',
                            remoteDirectory: '',
                            remoteDirectorySDF: false,
                            removePrefix: '',
                            sourceFiles: ''
                        )],
                        usePromotionTimestamp: false,
                        useWorkspaceInPromotion: false,
                        verbose: true
                    )])
                }
            }
        }

        stage('Deploy To Monolithic Server') {
            steps {
                script {
                   def Command = '''
                       set -ex
                       cd ~/blog-app/
                # Check if any process is listening on port 8081 and kill it
                PID=$(/usr/sbin/lsof -t -i:8081) || true
                if [ -n "$PID" ]; then
                    kill $PID || true
                    echo "Killed process $PID"
                else
                    echo "No process found listening on port 8081"
                fi

                # Run the new jar file
                java -jar blog-0.0.1-SNAPSHOT.jar > logfile 2>&1 &
                echo "Started new blog application"
                sleep 7
                cat logfile
            '''

            sshPublisher(publishers: [sshPublisherDesc(
                configName: env.MONOLITHIC_SERVER,
                transfers: [sshTransfer(
                    sourceFiles: 'target/blog-0.0.1-SNAPSHOT.jar',
                    removePrefix: 'target/',
                    makeEmptyDirs: false,
                    remoteDirectory: '/blog-app/',
                    execCommand: Command,
                    execTimeout: 120000
                )],
                usePromotionTimestamp: false,
                useWorkspaceInPromotion: false,
                verbose: true,
            )])
        }
    }
}


    }
}
